{"version":3,"sources":["../src/extractEmail.js"],"names":["input","matches","match","map","email","filter","tld","tlds","endsWith","index","self","indexOf"],"mappings":";;;;;;;AAEA;;AACA;;;;eAKgBA,KAAD,IAAmD;AAChE,QAAMC,OAAO,GAAG,6BAAeD,KAAf,EAAsBE,KAAtB,CAA4B,yIAA5B,CAAhB;;AAEA,MAAI,CAACD,OAAL,EAAc;AACZ,WAAO,EAAP;AACD;;AAED,SAAOA,OAAO,CACXE,GADI,CACCC,KAAD,IAAW;AACd,WAAOA,KAAP;AACD,GAHI,EAIJC,MAJI,CAIID,KAAD,IAAW;AACjB,SAAK,MAAME,GAAX,IAAkBC,aAAlB,EAAwB;AACtB,UAAIH,KAAK,CAACI,QAAN,CAAe,MAAMF,GAArB,CAAJ,EAA+B;AAC7B,eAAO,IAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD,GAZI,EAaJD,MAbI,CAaG,CAACD,KAAD,EAAQK,KAAR,EAAeC,IAAf,KAAwB;AAC9B,WAAOA,IAAI,CAACC,OAAL,CAAaP,KAAb,MAAwBK,KAA/B;AACD,GAfI,EAgBJN,GAhBI,CAgBCC,KAAD,IAAW;AACd,WAAO;AACLA,MAAAA;AADK,KAAP;AAGD,GApBI,CAAP;AAqBD,C","sourcesContent":["// @flow\n\nimport tlds from 'tlds';\nimport normalizeInput from './normalizeInput';\nimport type {\n  EmailMatchType,\n} from './types';\n\nexport default (input: string): $ReadOnlyArray<EmailMatchType> => {\n  const matches = normalizeInput(input).match(/(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/g);\n\n  if (!matches) {\n    return [];\n  }\n\n  return matches\n    .map((email) => {\n      return email;\n    })\n    .filter((email) => {\n      for (const tld of tlds) {\n        if (email.endsWith('.' + tld)) {\n          return true;\n        }\n      }\n\n      return false;\n    })\n    .filter((email, index, self) => {\n      return self.indexOf(email) === index;\n    })\n    .map((email) => {\n      return {\n        email,\n      };\n    });\n};\n"],"file":"extractEmail.js"}